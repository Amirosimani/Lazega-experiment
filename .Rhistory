View(deg.status)
waitlisted = DataFrame[grep("Yes", DataFrame$waitlist), ]
waitlisted.degree = waitlisted[,.SD,.SDcols=c(1,3)]
View(waitlisted.degree)
View(waitlisted)
waitlisted.degree = waitlisted[,.SD,.SDcols=c(1,2)]
View(waitlisted.degree)
waitlisted.degree = count(waitlisted[,.SD,.SDcols=c(1,2)])
View(waitlisted.degree)
waitlisted.degree = count(select[waitlisted, 1:2)
waitlisted.degree = count(select(waitlisted, 1:2)
waitlisted.degree = count(select(waitlisted, 1:2))
View(waitlisted.degree)
waitlisted = DataFrame[grep("Yes", DataFrame$waitlist), ]
waitlisted.degree = count(select(waitlisted, 1:2))
View(waitlisted)
waitlisted.degree = select(waitlisted, 1:2)
View(waitlisted.degree)
waitlisted.degree = count(select(waitlisted, 1:2))
count(waitlisted.degree)
count(waitlisted.degree, vars = degree)
waitlisted.degree = select(waitlisted, 1:2)
count(waitlisted.degree, vars = degree)
waitlisted.degree = count(waitlisted.degree, vars = degree)
View(waitlisted.degree)
deg.status = deg.status[ , N := sum(n.x, n.y, na.rm=TRUE), by=1:NROW(deg.status)]
waitlistGraph <- ggplot(DataFrame, aes(factor(DataFrame$waitlist), fill = factor(DataFrame$waitlist))) + geom_bar(width=.5) +
labs(title = "Enrollement Status", x = "Waitlist", y = "Number of students")
multiplot(waitlistGraph, degreeGraph, cols=2)
View(waitlisted.degree)
degree.t <- DataFrame[,.N,by= degree]
View(degree.t)
View(degree.t)
View(waitlisted.degree)
waitlisted.degree = count(waitlisted.degree, degree = degree)
waitlisted.degree = count(waitlisted.degree, vars = degree)
colnames(waitlisted.degree) <- c("degree","N")
View(waitlisted.degree)
left_join(degree.t, waitlisted.degree, by = "degree")
View(DataFrame)
View(deg.status)
DataFrame$degree = gsub("\\(master\\)", "", DataFrame$degree)
DataFrame$degree[which(DataFrame$degree== "MSDS")]<-"IDSE"
DataFrame$degree[which(DataFrame$degree== "Ms in ds")]<-"IDSE"
DataFrame$degree[which(DataFrame$degree== "Data Science")]<-"IDSE"
#Tools: spliting tools to seperate columns
tools <- strsplit(as.character(DataFrame$tools),',')
setDT(DataFrame)[, paste0("tools", 1:16) := tstrsplit(tools, ",")]   #Add seperate column for each program
degree.t <- DataFrame[,.N,by= degree]
waitlisted = DataFrame[grep("Yes", DataFrame$waitlist), ]
waitlisted.degree = select(waitlisted, 1:2)
waitlisted.degree = count(waitlisted.degree, vars = degree)
colnames(waitlisted.degree) <- c("degree","N")
left_join(degree.t, waitlisted.degree, by = "degree")
degree.t <- left_join(degree.t, waitlisted.degree, by = "degree")
View(degree.t)
degree.t[is.na(deg.status)] <- 0
degree.t[is.na(degree.t)] <- 0
View(degree.t)
View(degree.t)
View(waitlisted.degree)
View(degree.t)
waitlisted = DataFrame[grep("Yes", DataFrame$waitlist), ]
waitlisted.degree = select(waitlisted, 1:2)
waitlisted.degree = count(waitlisted.degree, vars = degree)
View(waitlisted.degree)
degree.t <- DataFrame[,.N,by= degree]
View(degree.t)
degree.t <- DataFrame[,.N,by= degree]
View(degree.t)
degree.t$QMSS
degree.t[QMSS]
degree.t(QMSS)
degreeFactors <- DataFrame[,.N,by= degree]
degreeFactors$N[1] <- degreeFactors$N[1] + degreeFactors$N[6] + degreeFactors$N[8] + degreeFactors$N[12]
degreeFactors <- degreeFactors[-c(6, 8, 12), ]
degreeFactors <- degreeFactors[order(-N),]
degreeFactors <- data.frame(degreeFactors)
View(degreeFactors)
CSV_url <- getURL("https://raw.githubusercontent.com/Amirosimani/ExploratoryDataAnalysis/master/Survey.csv")
DataFrame <- read.csv(text = CSV_url)
## Tidying the data frame
DataFrame <- Filter(function(x)!all(is.na(x)), DataFrame) #Delete empty columns
colnames(DataFrame) <- c("waitlist","degree","tools",
"R_DataManipulation", "pronoun","editor","R_Graphics",
"R_MultiVariate","Markdown","Matlab_DataManipulation","GitHub") #Rename columns name
# cleaning up text
DataFrame$tools = gsub("\\(formerly docs\\)", "", DataFrame$tools)
DataFrame$tools =  gsub("\\(grep\\)", "", gsub("\\(terminal \\/ command line\\)","", DataFrame$tools))
#Degree: removing non-unique values, combingin similar ones, etc
DataFrame$degree = gsub("\\(master\\)", "", DataFrame$degree)
DataFrame$degree[which(DataFrame$degree== "MSDS")]<-"IDSE"
DataFrame$degree[which(DataFrame$degree== "Ms in ds")]<-"IDSE"
DataFrame$degree[which(DataFrame$degree== "Data Science")]<-"IDSE"
View(DataFrame)
count(DataFrame, vars = degree)
DataFrame$degree[which(DataFrame$degree== "MSDS")]<-"IDSE "
DataFrame$degree[which(DataFrame$degree== "Ms in ds")]<-"IDSE "
DataFrame$degree[which(DataFrame$degree== "Data Science")]<-"IDSE "
count(DataFrame, vars = degree)
DataFrame$degree[which(DataFrame$degree== "MSDS")]<-"IDSE"
DataFrame$degree[which(DataFrame$degree== "Ms in ds")]<-"IDSE"
DataFrame$degree[which(DataFrame$degree== "Data Science")]<-"IDSE"
count(DataFrame, vars = degree)
waitlisted = DataFrame[grep("Yes", DataFrame$waitlist), ]
waitlisted.degree = select(waitlisted, 1:2)
waitlisted.degree = count(waitlisted.degree, vars = degree)
colnames(waitlisted.degree) <- c("degree","N")
degree.t <- DataFrame[,.N,by= degree]
View(waitlisted.degree)
total.degree <- count(DataFrame, vars = degree)
View(total.degree)
View(total.degree)
total.degree[-c(3, 9), ]
left_join(total.degree, waitlisted.degree)
left_join(total.degree, waitlisted.degree, by = degree)
waitlisted = DataFrame[grep("Yes", DataFrame$waitlist), ]
waitlisted.degree = select(waitlisted, 1:2)
waitlisted.degree = count(waitlisted.degree, vars = degree)
total.degree <- count(DataFrame, vars = degree)
total.degree[-c(3, 9), ]
left_join(total.degree, waitlisted.degree, by = vars)
library(RCurl)
library(data.table)
library(ggplot2)
library(grid)
library(dplyr)
# Read  file from GitHub repo
CSV_url <- getURL("https://raw.githubusercontent.com/Amirosimani/ExploratoryDataAnalysis/master/Survey.csv")
DataFrame <- read.csv(text = CSV_url)
## Tidying the data frame
DataFrame <- Filter(function(x)!all(is.na(x)), DataFrame) #Delete empty columns
colnames(DataFrame) <- c("waitlist","degree","tools",
"R_DataManipulation", "pronoun","editor","R_Graphics",
"R_MultiVariate","Markdown","Matlab_DataManipulation","GitHub") #Rename columns name
# cleaning up text
DataFrame$tools = gsub("\\(formerly docs\\)", "", DataFrame$tools)
DataFrame$tools =  gsub("\\(grep\\)", "", gsub("\\(terminal \\/ command line\\)","", DataFrame$tools))
#Degree: removing non-unique values, combingin similar ones, etc
DataFrame$degree = gsub("\\(master\\)", "", DataFrame$degree)
DataFrame$degree[which(DataFrame$degree== "MSDS")]<-"IDSE"
DataFrame$degree[which(DataFrame$degree== "Data Science")]<-"IDSE"
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
# Multiple plot function
DataFrame$degree[which(DataFrame$degree== "Ms in ds")]<-"IDSE"
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
#to do: data label on bars
#waitlist graph
waitlistGraph <- ggplot(DataFrame, aes(factor(DataFrame$waitlist), fill = factor(DataFrame$waitlist))) + geom_bar(width=.5) +
labs(title = "Enrollement Status", x = "Waitlist", y = "Number of students")
#degrees graph
#R Data manipulation graph
dataManiGraph <- ggplot(DataFrame, aes(factor(DataFrame$R_DataManipulation), fill = degree)) + geom_bar(width=.5) +
labs(title = "Data Manipulation with R", x = "Confidence Level", y = "Number of students")
#R Graphics
RGraphicsGraph <- ggplot(DataFrame, aes(factor(DataFrame$R_Graphics), fill = degree)) + geom_bar(width=.5) +
labs(title = "Basic Graphics with R", x = "Confidence Level", y = "Number of students")
#R Advanced amd  visualization
RAdvancedGraph <- ggplot(DataFrame, aes(factor(DataFrame$R_MultiVariate),fill = degree)) + geom_bar(width=.5) +
labs(title = "Advanced Analysis and Visualization with R", x = "Confidence Level", y = "Number of students")
#R Markdown
RMDGraph <- ggplot(DataFrame, aes(factor(DataFrame$Markdown), fill = degree)) + geom_bar(width=.5) +
labs(title ="R Markdown", x = "Confidence Level", y = "Number of students")
#Matlab Data Manipulation
MatlabGraph <- ggplot(DataFrame, aes(factor(DataFrame$Matlab_DataManipulation), fill = degree)) + geom_bar(width=.5) +
labs(title = "Data Manipulation wiht Matlab", x = "Confidence Level", y = "Number of students")
#GitHub
GitHubGraph <- ggplot(DataFrame, aes(factor(DataFrame$GitHub), fill = degree)) + geom_bar(width=.5) +
labs(title = "GitHub", x = "Confidence Level", y = "Number of students")
toolsDF = setDT(select(DataFrame, degree, tools))[,]
tools <- strsplit(as.character(toolsDF$tools),',')
a1 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("R", tools)), length))
toolsDF[, R:= a1]
a2 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("Excel", tools)), length))
toolsDF[, Excel:= a2]
a3 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("SQL", tools)), length))
toolsDF[, SQL:= a3]
a4 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("ggplot2", tools)), length))
toolsDF[, ggplot2:= a4]
a5 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("Python", tools)), length))
toolsDF[, Python:= a5]
a6 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("Stata", tools)), length))
toolsDF[, Stata:= a6]
a7 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("dropbox", tools)), length))
toolsDF[, dropbox:= a7]
a8 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("google drive", tools)), length))
toolsDF[, googledirve:= a8]
a9 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("LaTeX", tools)), length))
toolsDF[, LaTeX:= a9]
a10 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("regular expressions", tools)), length))
toolsDF[, RegEx:= a10]
a11 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("Sweave/knitr", tools)), length))
toolsDF[, Sweave.knitr:= a11]
a12 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("XML", tools)), length))
toolsDF[, xml:= a12]
a13 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("Web: html css js", tools)), length))
toolsDF[, web:= a13]
a14 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("shell", tools)), length))
toolsDF[, shell:= a14]
a15 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("Github", tools)), length))
toolsDF[, Github:= a15]
a16 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("C\\/C\\+\\+", tools)), length))
toolsDF[, C:= a16]
a17 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("Matlab", tools)), length))
toolsDF[, Matlab:= a17]
a18 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("SPSS", tools)), length))
toolsDF[, SPSS:= a18]
a19 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("RStudio", tools)), length))
toolsDF[, RStudio:= a19]
toolsDF$R <- toolsDF$R - toolsDF$RStudio
setkey(toolsDF)
toolsDF$degree <- as.factor(toolsDF$degree)
toolsDF[,tools:=NULL]
toolsDF.degree = toolsDF[, lapply(.SD, sum), by = degree]
toolsDF.degree.m <- melt(toolsDF.degree)
ggplot(toolsDF.degree.m, aes(degree, variable)) + geom_tile(aes(fill = value , colour = "white"))
View(toolsDF.degree.m)
View(toolsDF.degree)
toolsDF.degree[ , lapply(.SD , mean ) , by = degree ]
d <- toolsDF.degree[ , lapply(.SD , mean ) , by = degree ]
View(d)
View(DataFrame)
View(DataFrame)
CSV_url <- getURL("https://raw.githubusercontent.com/Amirosimani/ExploratoryDataAnalysis/master/Survey.csv")
DataFrame <- read.csv(text = CSV_url)
View(DataFrame)
install.packages("netcdf")
install.packages("ncdf4")
?ncdf4
help(ncdf4)
?ncdf4
??ncdf4
setwd("~/GitHub/Lazega experiment")
read.table("ELwork.dat",
header=TRUE)
a <- read.table("ELwork.dat",
header=TRUE)
View(a)
install_sand_packages()
install.packages("sand")
library(sand)
a <- elist.lazega
b <- v.attr.lazega
View(b)
View(a)
View(b)
attributes <- v.attr.lazega
attributes <- v.attr.lazega
network.coworker <- read.table("ELwork.dat")
View(network.coworker)
network.coworker = read.table("ELwork.dat")
network.coworker = read.table("ELwork.dat")
network.advice = read.csv("advice.csv")
network.friendship = read.csv("friends.csv")
network.valued = network.advice + network.coworker + network.friendship
View(network.valued)
unique(network.valued)
max(network.valued)
View(network.friendship)
View(network.valued)
View(network.advice)
View(network.coworker)
View(network.coworker)
View(network.friendship)
View(network.coworker)
View(network.friendship)
View(network.valued)
plot(prop.table(table(attributes$gender)))
View(attributes)
prop.table(attributes$Gender)
prop.table(table(attributes$Gender))
plot(prop.table(table(attributes$Gender)))
library(ggplot2)
barplot(prop.table(table(attributes$Gender)))
ggplot(attributes, aes(Gender)) + geom_bar()
ggplot(attributes, aes(Gender, fill = factor(Gender)) + geom_bar()
ggplot(attributes, aes(Gender, fill = factor(Gender))) + geom_bar()
plot.gender <- ggplot(attributes, aes(Gender))
plot.gender + geom_bar()
plot.gender + geom_bar(aes(fill = drv), position = "fill")
plot.gender <- ggplot(attributes, aes(x = Gender))
count(attributes$Gender)
a <- as.factor(attributes$Gender)
a
table(a)
table(attributes$Gender)
View(attributes)
library(plyr)
attributes = read.table("atts.csv")
a <- as.factor(attributes$Gender)
table(a)
View(attributes)
attributes = read.table("atts.csv")
attributes <- data.frame(do.call('rbind', strsplit(as.character(attributes[1]),',',fixed=TRUE)))
View(attributes)
attributes = read.table("atts.csv")
network.coworker = read.table("ELwork.dat", sep = ",")
network.coworker = read.table("ELwork.dat")
attributes = read.table("atts.csv", sep = ",")
View(attributes)
colnames <- attributes[,1]
colnames
colnames <- attributes[1,]
View(colnames)
names <- attributes[1,]
colnames(attributes) <- names
View(attributes)
names <- attributes[1,]
View(names)
View(names)
colnames(attributes) <- c("ID", "status", "gender", "office", "seniority", "age", "practice", "lawschool")
View(attributes)
attributes <- attributes[-1,]
View(attributes)
attributes = read.table("atts.csv", sep = ",", header = F)
View(attributes)
attributes = read.table("atts.csv", sep = ",", header = T)
View(attributes)
attributes = read.table("atts.csv", sep = ",", header = T)
network.coworker = read.table("ELwork.dat")
network.advice = read.csv("advice.csv")
network.friendship = read.csv("friends.csv")
network.valued = network.advice + network.coworker + network.friendship
barplot(prop.table(table(attributes$gender)))
plot.gender <- ggplot(attributes, aes(x = gender))
plot.gender + geom_bar(aes(fill = drv), position = "fill")
plot.gender + geom_bar(aes(fill = gender), position = "fill")
plot.gender + geom_bar()
View(attributes)
library(reshape)
a <- as.factor(attributes$gender)
a <- table(as.factor(attributes$gender))
a
att.m <- melt(cbind(attributes)
att.m <- melt(cbind(attributes))
att.m <- melt(cbind(attributes))
View(att.m)
plot.gender <- ggplot(attributes, aes(x = gender))
plot.gender + geom_bar()
table(attributes$gender)
a.m <- melt(attributes$gender)
View(a.m)
a.m <- melt(attributes$gender, id.vars=1:2)
View(a.m)
attributes = read.table("atts.csv", sep = ",", header = T)
network.coworker = read.table("ELwork.dat")
network.advice = read.csv("advice.csv")
network.friendship = read.csv("friends.csv")
network.valued = network.advice + network.coworker + network.friendship
barplot(prop.table(table(attributes$gender)))
plot.gender <- ggplot(attributes, aes(x = gender))
plot.gender + geom_bar()
attributes
View(attributes)
table(as.factor(attributes$seniority))
ggplot(attributes, aes(table(as.factor(attributes$seniority)))) +
geom_histogram()
ggplot(attributes, aes(attributes$seniority)) +
geom_histogram()
ggplot(attributes, aes(attributes$seniority)) +
geom_histogram(binwidth = 1)
ggplot(attributes, aes(attributes$seniority, fill = gender)) +
geom_histogram(binwidth = 1)
ggplot(attributes, aes(attributes$seniority, fill = status)) +
geom_histogram(binwidth = 1)
ggplot(attributes, aes(attributes$seniority, fill = as.factor(status))) +
geom_histogram(binwidth = 1)
ggplot(attributes, aes(attributes$seniority, fill = as.factor(gender))) +
geom_histogram(binwidth = 1)
ggplot(attributes, aes(x = gender)) + geom_bar()
ggplot(attributes, aes(attributes$seniority, fill = as.factor(gender))) +
geom_histogram(binwidth = 1)
ggplot(attributes, aes(attributes$seniority, fill = as.factor(gender))) +
geom_histogram(binwidth = 1) +
labs(title = "Seniority and Gender")
ggplot(attributes, aes(attributes$seniority, fill = as.factor(gender))) +
geom_histogram(binwidth = 1) +
labs(title = "Seniority and Gender", x = "Seniority - Years in the firm", y = "Number of staff")
ggplot(attributes, aes(attributes$seniority, fill = as.factor(gender))) +
geom_histogram(binwidth = 1) +
labs(title = "Seniority and Gender", x = "Seniority - Years in the firm", y = "Number of staff") +
ylim(0, 10)
ggplot(attributes, aes(attributes$seniority, fill = as.factor(gender))) +
geom_histogram(binwidth = 1) +
labs(title = "Seniority and Gender", x = "Seniority - Years in the firm", y = "Number of staff") +
ylim(0, 9)
ggplot(attributes, aes(attributes$seniority, fill = as.factor(gender))) +
geom_histogram(binwidth = 1) +
labs(title = "Seniority and Gender", x = "Seniority - Years in the firm", y = "Number of staff", colour = "Gender") +
ylim(0, 9)
ggplot(attributes, aes(attributes$seniority, fill = gender)) +
geom_histogram(binwidth = 1) +
labs(title = "Seniority and Gender", x = "Seniority - Years in the firm", y = "Number of staff", colour = "Gender") +
ylim(0, 9)
as.factor(
as.factor(
as.factor(
as.factor(
ggplot(attributes, aes(attributes$seniority, fill = as.factor(gender))) +
geom_histogram(binwidth = 1) +
labs(title = "Seniority and Gender", x = "Seniority - Years in the firm", y = "Number of staff", colour = "Gender") +
ylim(0, 9)
ggplot(attributes, aes(attributes$seniority, fill = as.factor(gender))) +
geom_histogram(binwidth = 1) +
labs(title = "Seniority and Gender", x = "Seniority - Years in the firm", y = "Number of staff", colour = "Gender") +
ylim(0, 9) +
scale_fill_manual("legend_title")
title <- "Gender"
ggplot(attributes, aes(attributes$seniority, fill = as.factor(gender))) +
geom_histogram(binwidth = 1) +
labs(title = "Seniority and Gender", x = "Seniority - Years in the firm", y = "Number of staff", colour = "Gender") +
ylim(0, 9) +
scale_fill_manual(title)
ggplot(attributes, aes(attributes$seniority, fill = as.factor(gender))) +
geom_histogram(binwidth = 1) +
labs(title = "Seniority and Gender", x = "Seniority - Years in the firm", y = "Number of staff", colour = "Gender") +
ylim(0, 9)
ggplot(attributes, aes(attributes$seniority, fill = as.factor(status))) +
geom_histogram(binwidth = 1) +
labs(title = "Seniority and Affiliation", x = "Seniority - Years in the firm", y = "Number of staff", colour = "Gender") +
ylim(0, 9)
ggplot(attributes, aes(attributes$seniority, fill = as.factor(status))) +
geom_histogram(binwidth = 1) +
labs(title = "Seniority and Affiliation", x = "Seniority - Years in the firm", y = "Number of staff") +
ylim(0, 9)
ggplot(attributes, aes(attributes$seniority, fill = as.factor(gender))) +
geom_histogram(binwidth = 1) +
labs(title = "Seniority and Gender", x = "Seniority - Years in the firm", y = "Number of staff") +
ylim(0, 9)
ggplot(attributes, aes(attributes$seniority, fill = as.factor(status))) +
geom_histogram(binwidth = 1) +
labs(title = "Seniority and Affiliation", x = "Seniority - Years in the firm", y = "Number of staff") +
ylim(0, 9)
ggplot(attributes, aes(x = gender)) + geom_bar()
ggplot(attributes, aes(attributes$seniority, fill = as.factor(gender))) +
geom_histogram(binwidth = 1) +
labs(title = "Seniority and Gender", x = "Seniority - Years in the firm", y = "Number of staff") +
ylim(0, 9)
ggplot(attributes, aes(attributes$seniority, fill = as.factor(status))) +
geom_histogram(binwidth = 1) +
labs(title = "Seniority and Affiliation", x = "Seniority - Years in the firm", y = "Number of staff") +
ylim(0, 9)
View(attributes)
library(igraph)
library(NetData)
install.packages("NetData")
library(NetData)
data(network.valued, package = "NetData")
network.valued(kracknets, package = "NetData")
View(network.valued)
g <- graph.adjacency(network.valued)
g <- graph.adjacency(network.friendship)
library(igraph)
g <- graph.adjacency(network.friendship)
network.matrix <- data.matrix(network.friendship, rownames.force = NA)
View(network.matrix)
g <- graph.adjacency(network.matrix)
get.edgelist(g)
g <- graph.adjacency(network.matrix, weighted = F, mode = "directed")
g <- graph.adjacency(network.matrix, weighted=T, mode = “undirected”)
g <- graph.adjacency(network.matrix, weighted=T)
g <- graph.adjacency(network.matrix, weighted=F)
g <- graph.adjacency(network.matrix, weighted=FALSE)
g <- graph.adjacency(network.matrix)
get.edgelist(g)
set.seed(3952)
layout1 <- layout.fruchterman.reingold(g)
plot(g, layout=layout1)
set.seed(1)
layout1 <- layout.fruchterman.reingold(g)
plot(g, layout=layout1)
plot(g, layout=layout.kamada.kawai)
tkplot(g, layout=layout.kamada.kawai)
V(g)$label.cex <- 2.2 * V(g)$degree / max(V(g)$degree)+ .2
V(g)$degree <- degree(g)
g <- graph.adjacency(network.matrix)
V(g)$degree <- degree(g)
get.edgelist(g)
set.seed(1)
layout1 <- layout.fruchterman.reingold(g)
plot(g, layout=layout1)
V(g)$label.cex <- 2.2 * V(g)$degree / max(V(g)$degree)+ .2
V(g)$label.color <- rgb(0, 0, .2, .8)
V(g)$frame.color <- NA
egam <- (log(E(g)$weight)+.4) / max(log(E(g)$weight)+.4)
plot(g, layout=layout1)
